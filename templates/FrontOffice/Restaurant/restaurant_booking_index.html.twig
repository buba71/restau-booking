{% extends 'base.html.twig' %}


{% block stylesheets%}
    {{ parent() }}    
{% endblock %}

{% block body %}

<div class="text-center mt-5 text-muted">
  <h1>Réserver</h1>
</div>

<div class="row mt-5 booking-container">
  <div class="col-xl-7 col-lg-7 h-100">

    <div class="row">

      <section class="card booking-details col-12" style="height = 800px;">
        <div class="restaurant-infos" style="width: 100%;">
            <div class="row g-0">
                <div class="col-md-6">
                  <img src="{{ asset('/images/restaurant.png') }}" class="img-fluid" alt="image-restaurant">
                </div>
                <address class="col-md-6 py-2 restaurant-infos">                  
                    <div class="card-body">
                      <h5 class="card-title">{{ restaurant.name }}</h5>
                      <p class="card-text">{{ restaurant.address}}</p>
                      <p class="card-text">{{ restaurant.zipcode}} {{ restaurant.city }}</p>
                      <p class="card-text"><em>{{ restaurant.speciality}}</em></p>
                      <p class="card-text">Téléphone: {{ restaurant.phone}}</p>
                    </div>                                   
                </address>                
            </div>
        </div>       
      </section>

    </div>

    <div class="card row my-1 py-2">

      <section class="restaurant-schedule col-12">
      {% set days = ['Lundi', 'Mardi', 'Mercredi','Jeudi','Vendredi', 'Samedi', 'Dimanche'] %}
      {% set index = 0 %}
          
          <h5 class="card-title text-center"><strong>Horaires d'ouverture</strong></h5>        
        
          <div class="d-flex justify-content-center">

            <table cellpadding=0>
              <thead>
                <tr>
                  <th></th>
                  <th>Service midi</th>
                  <th>Service Soir</th>
                  <th>Service continu</th>
                </tr>
              </thead>
              <tbody>
                {% set i = 1 %}
                {% for timeSlot in restaurant.timeSlots %}
                  {% if timeSlot.hasDate == false %}
                    <tr>
                      <th class="text-muted" scope="row">{{ days[index] }}</th>

                        {% if timeSlot.status == 9 %}
                          <td class="px-2"><em>{{ timeSlot.serviceStartAtAm|date('H:i') }}-{{ timeSlot.serviceCloseAtAm|date('H:i') }}</em></td>
                          <td class="px-2"><em>{{ timeSlot.serviceStartAtPm|date('H:i') }}-{{ timeSlot.serviceCloseAtPm|date('H:i') }}</em></td>
                          <td class="px-2 text-center">-</td>
                        {% elseif timeSlot.status == 8 %}
                          <td class="px-2 text-center">-</td>
                          <td class="px-2 text-center">-</td>
                          <td class="px-2"><em>{{ timeSlot.serviceStartAtAm|date('H:i') }}-{{ timeSlot.serviceCloseAtAm|date('H:i') }}</em></td>
                        {% elseif timeSlot.status == 7 %}
                          <td class="px-2 text-center"><em>Fermé</em></td>
                          <td class="px-2 text-center"><em>Fermé</em></td>
                          <td class="px-2 text-center">-</td>
                        {% endif %}
                      
                    </tr>
                  {% endif %}
                  {% set index = index + 1 %}
                {% endfor %}            
              </tbody>
            </table> 

          </div>       
                   
      </section>

    </div>

    <div class="card row py-5">
    
    {{ form_start(form) }}
  
      <section class="booking-form col-12 d-flex flex-column justify-content-center">  

          <div class="form-errors text-center">
            {{ form_errors(form) }}
          </div>
          <div class="text-center">
            {{ form_row(form.coversNumber) }} 
            {{ form_row(form.bookingDate) }}
          </div>
          
                           
                        
      </section> 

    </div> 

  </div>
    
  <div class="col-xl-5 col-lg-5 pl-1 pr-1">

  <!-- Booking calendar -->
    <section class="card booking-schedule h-100">
          <div id="picker">
          </div>
          
          <div class="booking-controls mt-5 d-flex justify-content-around">

            {{ form_row(form.booking) }}
            
            {% if restaurant.orderEnabled %}
              {{ form_row(form.bookingOrder)}}
            {% endif %}                      

          </div> 
    </section>
    {{ form(form._token)}}
    {{ form_end(form, {'render_rest': false})}}
    
  <!-- Booking calendar -->

  </div>
      
       
     
</div>

{% endblock %}

{% block javascripts %}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.slim.min.js"></script>
<!-- calendar library picker -->
<script src="{{ asset("js/mark-your-calendar.js") }}"></script>

<script>

// Calendar initialisation.
const months = ['janvier', 'fevrier', 'mars', 'avril', 'mai', 'juin', 'juillet', 'aout', 'septembre', 'octobre', 'novembre', 'decembre'];

function convertMonthsToEnglish (frenchMonth) {
  let month;
  switch (frenchMonth) {
    case "janvier":
      month = "january";
      break;
    case "fevrier":
      month = "february";
      break;
    case "mars":      
      month = "march";
      break;
    case "avril":
      month = "april";
      break;
    case 'mai':
      month = 'may';
      break;
    case 'juin':
      month = 'june';
      break;
    case 'juillet':
      month = 'july';
      break;
    case 'aout':
      month = 'august';
      break;
    case 'septembre':
      month = 'september';
      break;
    case 'octobre':
      month = 'october';
      break;
    case 'novembre':
      month = 'november';
      break;
    case 'decembre':
      month = 'december';
      break;
    default:
      month = 'rien';
  }
  return month;
}

const weekdays = ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'];

const prevHtml = `
            <div id="myc-prev-week">
                <i class="fa fa-chevron-left"></i>
            </div>
        `;

const nextHtml = `
            <div id="myc-next-week">
                <i class="fa fa-chevron-right"></i>
            </div>
        `;

const startDate = new Date();

// Data payload when view is loaded(calendar).
const dataPayload = {
  startDate: startDate,
  restaurantId: {{ restaurant.id }}
}

// Make calendar sync with backend data.
const calendar = () => {
  fetch('{{ path('time_slots') }}', {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
    },
    method: 'POST',
    body: JSON.stringify(dataPayload)
  })
  .then((response) => response.json())
  .then((data) => {

    

    $('#picker').markyourcalendar({
    startDate: startDate,
    availability: data,
    isMultiple: false,
    months: months,
    prevHtml: prevHtml,
    nextHtml: nextHtml,
    weekdays: weekdays,
    onClickNavigator: function(ev, instance) {
      
      const daysNumberHeader = document.querySelectorAll('.myc-date-number');
      const daysNameHeader = document.querySelectorAll('.myc-date-display');
      const daysName = [];
      const daysNumber = [];

      daysNameHeader.forEach(element => {
        daysName.push(element.innerHTML);
      });

      daysNumberHeader.forEach(element => {
        daysNumber.push(element.innerHTML);
      });

      const monthAndYear = document.getElementById('myc-current-month-year-container').innerHTML;
      const year = (monthAndYear.trim()).match(/\d+/g).toString();
      const frenchMonth = (monthAndYear.trim()).match(/([a-zA-Z ])/g).join("");      
      const englishMonth = convertMonthsToEnglish(frenchMonth.trim());

      const navigationStartDate = new Date(englishMonth + ' ' + daysNumber[0] + ',' + year);
      // fix temporarily the lag between frontend call date and backend date request.
      navigationStartDate.setHours(1);

      const timeSlot = [];

      // Data payload when user navigate on calendar loading.
      const dataPayload = {
        startDate: navigationStartDate,
        restaurantId: {{ restaurant.id }}
      }        

      setTimeSlots(instance);

      // On click next or prev, make ajax call to fetch time Slots from backend and set calendar with it.
      function setTimeSlots (instance) {
          fetch('{{ path('time_slots') }}', {
            headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
            },
            method: 'POST',
            body: JSON.stringify(dataPayload)
          })
          .then((response) => response.json())
          .then((data) => {
            instance.setAvailability(data);

            // Calendar is loaded => get timeSlots for applying style(Past dates and cloded dates).
            const times = document.querySelectorAll('.myc-available-time');
            const today = new Date();
            Array.from(times).forEach(element => {
              const date = element.getAttribute('data-date');
              const dateTime = element.getAttribute('data-time');

              let isClosedDate = new Date(date + 'T' + dateTime);             

              if ( (today.getTime() > new Date(date + 'T' + dateTime)) | (isClosedDate == 'Invalid Date')) {

                element.classList.remove("myc-available-time");
                element.classList.add("myc-disabled-time");
              }

            });
            
          })
          .catch(error => console.log(error));
      } 
    },
    onClick: function(event, data) {
      const bookingDateInput = document.getElementById('booking_bookingDate');
      bookingDateInput.value = data;
      console.log(bookingDateInput)
    }

    });

    // Calendar is loaded => get timeSlots for applying style(Past Dates and closed dates).
    const times = document.querySelectorAll('.myc-available-time');
    const today = new Date();
    Array.from(times).forEach(element => {
      const date = element.getAttribute('data-date');
      const dateTime = element.getAttribute('data-time');

      let isClosedDate = new Date(date + 'T' + dateTime);       
      
      if  ((today.getTime() > new Date(date + 'T' + dateTime)) | (isClosedDate == 'Invalid Date')) {        

        element.classList.remove("myc-available-time");
        element.classList.add("myc-disabled-time");
      }      
    });

  })
  .catch(error => console.log(error));  
}

calendar()

</script>
{% endblock %}